"""
Copyright (c) 2020 Genome Research Limited

Author: Christopher Harrison <ch12@sanger.ac.uk>

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
Public License for more details.

You should have received a copy of the GNU General Public License along
with this program. If not, see https://www.gnu.org/licenses/
"""

import argparse

from core import typing as T
from bin.common import version


def _parser_factory():
    """ Build an argument parser meeting requirements """
    top_level = argparse.ArgumentParser("sandman")

    top_level.add_argument("vaults", metavar="PATH", type=T.Path, nargs="+",
        help="path to a location covered by a vault")

    top_level.add_argument("--dry-run", action="store_true",
        help="log what should happen during the sweep phase (the drain phase will not be run)")

    top_level.add_argument("--force-drain", action="store_true",
        help="drain the queue of staged files regardless of it reaching its configured threshold (irrelevant when using --dry-run)")

    top_level.add_argument("--stats", metavar="FILE", type=T.Path,
        help="file listings generated by mpistat")

    top_level.add_argument("--version", action="version", version=f"%(prog)s {version.sandman}")

    def parser(args:T.List[str]) -> argparse.Namespace:
        parsed = top_level.parse_args(args)

        if parsed.stats is not None:
            parsed.stats = parsed.stats.resolve()

        parsed.vaults = [path.resolve() for path in parsed.vaults]

        return parsed

    return parser

parse_args = _parser_factory()
